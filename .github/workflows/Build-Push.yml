name: Backend CI Pipeline

# Trigger the workflow on pull requests assigned to the 'main' branch,
# manual dispatch, and pushes to 'main' or any 'dev/**' branches.
on:
  pull_request:
    types:
      - assigned
    branches:
      - main

  workflow_dispatch:
  push:
    branches:
      - 'main'
      - 'dev/**'

jobs:
  Gradle-Build-and-Test:
    # Define the job to run on the latest Ubuntu environment.
    runs-on: ubuntu-latest
    environment: backend-test-dev
    steps:
      # Step to check out the repository code.
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step to set up JDK 17 using the Temurin distribution.
      - name: Set up JDK 17
        uses: actions/setup-java@v4.3.0
        with:
          java-version: '17'
          distribution: 'temurin'

      # Step to grant execute permissions to the Gradle wrapper script.
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Step to build the project using Gradle.
      - name: Build with Gradle
        run: ./gradlew build

      # Step to run tests and generate a code coverage report using Gradle.
      - name: Run tests
        run: ./gradlew test jacocoTestReport

      # Step to upload the test results as an artifact.
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: build/test-results/test

      # Step to upload the code coverage report as an artifact.
      - name: Upload code coverage report
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: build/reports/jacoco/test/jacocoTestReport.xml

  Sonarcloud-Scan:
    # Define the job to run after the 'Gradle-Build-and-Test' job.
    needs: Gradle-Build-and-Test
    runs-on: ubuntu-latest
    environment: backend-test-dev
    steps:
      # Step to perform a SonarCloud scan using the provided environment variables.
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v3.0.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
            -Dsonar.java.coveragePlugin=jacoco
            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml      

  Build-and-Push-image-to-DockerHub:
    # Define the job to run after the 'Sonarcloud-Scan' job.
    needs: Sonarcloud-Scan
    runs-on: ubuntu-latest
    environment: backend-test-dev
    steps:
      # Step to check out the repository code.
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step to log in to Docker Hub using the provided credentials.
      - name: Log in to Docker Hub
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step to build and push the Docker image with a timestamp tag and latest tag.
      - name: Build and push Docker image
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          IMAGE_TAG=${{ secrets.DOCKER_USERNAME }}/github-actions-backend:${TIMESTAMP}
          LATEST_TAG=${{ secrets.DOCKER_USERNAME }}/github-actions-backend:latest
          docker build -t ${IMAGE_TAG} -t ${LATEST_TAG} .
          docker push ${IMAGE_TAG} --alias ${LATEST_TAG}