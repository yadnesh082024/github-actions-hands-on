name: Backend CI Pipeline

# Trigger the workflow on pull requests assigned to the 'main' branch,
# manual dispatch, and pushes to 'main' or any 'dev/**' branches.
on:
  pull_request:
    types:
      - assigned
    branches:
      - main

  workflow_dispatch:
  push:
    branches:
      - 'main'
      - 'dev/**'

jobs:
  Gradle-Build-and-Test:
    # Define the job to run on the latest Ubuntu environment.
    runs-on: ubuntu-latest
    environment: backend-test-dev
    steps:
      # Step to check out the repository code.
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step to set up JDK 17 using the Temurin distribution.
      - name: Set up JDK 17
        uses: actions/setup-java@v4.3.0
        with:
          java-version: '17'
          distribution: 'temurin'

      # Step to grant execute permissions to the Gradle wrapper script.
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Step to build the project using Gradle.
      - name: Build with Gradle
        run: ./gradlew build

      # Step to run tests and generate a code coverage report using Gradle.
      - name: Run tests
        run: ./gradlew test jacocoTestReport

      # Step to upload the test results as an artifact.
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: build/test-results/test

      # Step to upload the code coverage report as an artifact.
      - name: Upload code coverage report
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: build/reports/jacoco/test/jacocoTestReport.xml

  Sonarcloud-Scan:
    # Define the job to run after the 'Gradle-Build-and-Test' job.
    needs: Gradle-Build-and-Test
    runs-on: ubuntu-latest
    environment: backend-test-dev
    steps:
      - name: Check Branch Name
        run: echo "Branch name is ${{ github.ref_name }}"
      # Step to perform a SonarCloud scan using the provided environment variables.
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v3.0.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
            -Dsonar.java.coveragePlugin=jacoco
            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml
            -Dsonar.branch.name=${{ github.ref_name }}

  Build-and-Push-image-to-DockerHub:
    needs: Sonarcloud-Scan
    runs-on: ubuntu-latest
    environment: backend-test-dev
    outputs:
      image_tag: ${{ steps.build.outputs.image_tag }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        id: build
        run: |
          export TZ=Asia/Kolkata
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr '/' '-')
          IMAGE_TAG="${{ secrets.DOCKER_USERNAME }}/github-actions-backend:${BRANCH_NAME}-${TIMESTAMP}"
          LATEST_TAG="${{ secrets.DOCKER_USERNAME }}/github-actions-backend:${BRANCH_NAME}-latest"
          docker build -t ${IMAGE_TAG} -t ${LATEST_TAG} .
          docker push ${IMAGE_TAG}
          docker push ${LATEST_TAG}
          echo "image_tag=${BRANCH_NAME}-${TIMESTAMP}" >> $GITHUB_OUTPUT

  Update-manifests:
    runs-on: ubuntu-latest
    needs: Build-and-Push-image-to-DockerHub
    environment: backend-test-dev
    steps:
      - name: Checkout spring-boot-backend repository
        uses: actions/checkout@v4

      - name: Set up Git with workflow user
        run: |
          git config --global user.name "GitHub-Actions-CI-Build"

      - name: Checkout K8s Manifests Repository
        uses: actions/checkout@v4
        with:
          repository: yadnesh082024/spring-boot-backend-k8s-manifests
          token: ${{ secrets.GH_PAT_UPDATE_MANIFEST }}

      - name: Verify file existence
        run: ls -l spring-boot-backend-helm-chart/values.yaml

      - name: Update Helm values
        run: |
          IMAGE_TAG="${{ needs.Build-and-Push-image-to-DockerHub.outputs.image_tag }}"
          sed -i "s/tag: .*/tag: ${IMAGE_TAG}/" spring-boot-backend-helm-chart/values.yaml

      - name: Check for changes
        id: Changes
        run: |
          git add .
          if git diff-index --quiet HEAD --; then
              echo "No changes to commit"
              echo "changes=false" >> $GITHUB_OUTPUT
          else
              echo "changes=true" >> $GITHUB_OUTPUT

      - name: Commit and push changes if branch is main
        if: github.ref == 'refs/heads/main' && steps.changes.outputs.changes == 'true'
        run: |
          git commit -m "Update image tag to ${IMAGE_TAG}"
          git push origin main

      - name: Create pull request if branch is not main
        if: github.ref != 'refs/heads/main' && steps.changes.outputs.changes == 'true'
        run: |
          git checkout -b update-${{ github.ref_name }}
          git commit -m "Update image tag to ${IMAGE_TAG}"
          git push origin update-${{ github.ref_name }}
          gh pr create --title "Update image tag to ${IMAGE_TAG}" --body "This PR updates the image tag to ${IMAGE_TAG}."